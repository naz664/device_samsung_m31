import /init.recovery.ldconfig.rc	
import /init.recovery.usb.rc	
import /init.recovery.${ro.hardware}.rc	

on early-init	
    # Set the security context of /postinstall if present.	
    restorecon /postinstall	

    start ueventd	

    write /sys/fs/selinux/enforce 0

    setprop sys.usb.configfs 1	

on init	
    export PATH /sbin:/system/bin	
    export LD_LIBRARY_PATH /system/lib64	

    export ANDROID_ROOT /system	
    export ANDROID_DATA /data	
    export EXTERNAL_STORAGE /sdcard	

    symlink /proc/self/fd/0 /dev/stdin	
    symlink /proc/self/fd/1 /dev/stdout	
    symlink /proc/self/fd/2 /dev/stderr	

    symlink /system/bin /bin	
    symlink /system/etc /etc	

    mount cgroup none /acct cpuacct	
    mkdir /acct/uid	

    mkdir /sdcard	
    mkdir /system	
    mkdir /data	
    mkdir /cache	
    mkdir /sideload	
    mkdir /mnt/system	
    mount tmpfs tmpfs /tmp	
    # unlink /efs > /mnt/vendor/efs	
    rm /efs	
    mkdir /efs	
    mkdir /sec_efs	

    chown root shell /tmp	
    chmod 0775 /tmp	

    write /proc/sys/kernel/panic_on_oops 1	
    write /proc/sys/vm/max_map_count 1000000	

    start watchdogd	

on boot	
    ifup lo	
    hostname localhost	
    domainname localdomain	

    class_start default	

# Load properties from /system/ + /factory after fs mount.	
on load_system_props_action	
    load_system_props	

on firmware_mounts_complete	
   rm /dev/.booting	

# Mount filesystems and start core system services.	
on late-init	
    trigger early-fs	
    trigger fs	
    trigger post-fs	
    trigger post-fs-data	

    # Load properties from /system/ + /factory after fs mount. Place	
    # this in another action so that the load will be scheduled after the prior	
    # issued fs triggers have completed.	
    trigger load_system_props_action	

    # Remove a file to wake up anything waiting for firmware	
    trigger firmware_mounts_complete	

    trigger early-boot	
    trigger boot	

service ueventd /system/bin/ueventd	
    critical	
    seclabel u:r:ueventd:s0	

service charger /system/bin/charger	
    critical	
    seclabel u:r:charger:s0	

service recovery /system/bin/recovery	
    socket recovery stream 422 system system	
    seclabel u:r:recovery:s0	

service adbd /system/bin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery	
    disabled	
    socket adbd stream 660 system system	
    seclabel u:r:adbd:s0	

# Restart adbd so it can run as root	
on property:service.adb.root=1	
    restart adbd	

# Always start adbd on userdebug and eng builds	
on fs && property:ro.debuggable=1	
    setprop sys.usb.config adb	

on fs && property:sys.usb.configfs=1	
    mount configfs none /sys/kernel/config	
    mkdir /sys/kernel/config/usb_gadget/g1	 
    mkdir /sys/kernel/config/usb_gadget/g1/strings/0x409	
    mkdir /sys/kernel/config/usb_gadget/g1/configs/c.1	
    mkdir /sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409	
    mkdir /sys/kernel/config/usb_gadget/g1/functions/ffs.adb 0770 shell shell	
    mkdir /sys/kernel/config/usb_gadget/g1/functions/mtp.0	
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}	
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer "SAMSUNG"	
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/product "SAMSUNG_Android"	
    write /sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "Conf 1"	
    write /sys/kernel/config/usb_gadget/g1/configs/c.1/MaxPower 0x3f	
    symlink /sys/kernel/config/usb_gadget/g1/functions/mtp.0 /sys/kernel/config/usb_gadget/g1/configs/c.1/mtp.0
    symlink /sys/kernel/config/usb_gadget/g1/functions/ffs.adb /sys/kernel/config/usb_gadget/g1/configs/c.1/ffs.adb

on fs	
#@RECOVERY [For reboot reason.	
    symlink /dev/block/by-name/param /dev/block/param	
    chown root system /dev/block/param	
    chmod 0666 /dev/block/param	
    symlink /dev/block/by-name /dev/block/platform/13520000.ufs/by-name
    chown root system  /dev/block/platform/13520000.ufs/by-name
    chmod 0666  /dev/block/platform/13520000.ufs/by-name
#]	

    mkdir /dev/usb-ffs 0775 shell shell	
    mkdir /dev/usb-ffs/adb 0770 shell shell	
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000	

on property:sys.usb.config=adb	
    start adbd	

on property:sys.usb.config=mtp,adb	
    start adbd	

# Set watchdog timer to 30 seconds and pet it every 10 seconds to get a 20 second margin	
service watchdogd /system/bin/watchdogd 10 20	
    class core	
    oneshot	
    seclabel u:r:watchdogd:s0
